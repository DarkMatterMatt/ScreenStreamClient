{"version":3,"sources":["components/SelectStream.tsx","components/Video.tsx","PeerManager.ts","env.ts","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getDisplayMedia","constraints","navigator","mediaDevices","Error","SelectStream","p","useState","streamState","setStreamState","select","a","video","stream","onStreamSelected","getVideoTracks","addEventListener","onStreamEnded","console","log","error","onClick","type","Video","srcObject","props","refVideo","useRef","useEffect","current","src","URL","createObjectURL","ref","PeerManager","o","audioBandwidth","frameRate","height","onStream","onStreamEnd","peer","queuedStream","videoBandwidth","ws","wsChannel","this","WebSocket","wsUrl","initWebSocket","send","JSON","stringify","route","channelId","ev","data","parse","status","signal","text","initPeer","numberOfMembers","warn","code","reason","isInitiator","SimplePeer","initiator","sdpTransform","sdpTransform_","undefined","on","addStream","s","raw","sdp","replace","removeStream","nodeEnv","makeValidator","x","str","choices","_parse","renamedEnv","Object","entries","process","reduce","obj","k","v","env","cleanEnv","NODE_ENV","default","WS_URL","url","App","pm","setStream","window","location","hash","className","logo","alt","width","autoPlay","muted","controls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAWA,SAASA,EAAgBC,GACrB,GAAIC,UAAUC,cAAgBD,UAAUC,aAAaH,gBACjD,OAAOE,UAAUC,aAAaH,gBAAgBC,GAElD,GAAIC,UAAUF,gBACV,OAAOE,UAAUF,gBAAgBC,GAErC,MAAM,IAAIG,MAAM,qCASb,SAASC,EAAaC,GACzB,KANQJ,UAAUC,cAAgBD,UAAUC,aAAaH,iBAAoBE,UAAUF,iBAOnF,OACE,gDAIN,MAAsCO,mBAAsB,WAA5D,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAM,uCAAG,kCAAAC,EAAA,+EAEcX,EAAgB,CAAEY,MAAON,EAAEL,cAAe,IAFxD,OAEDY,EAFC,OAGHP,EAAEQ,kBACFR,EAAEQ,iBAAiBD,GAEvBJ,EAAe,YANR,EAQSI,EAAOE,iBARhB,oBAQAH,EARA,MASDI,iBAAiB,SAAS,WACxBV,EAAEW,eACFX,EAAEW,cAAcJ,GAEpBJ,EAAe,YAEnBS,QAAQC,IAAI,QAASP,GAfd,kDAkBPM,QAAQE,MAAR,MACAX,EAAe,SAnBR,0DAAH,qDAuBZ,MAAoB,aAAhBD,EAEE,kDAKJ,qCACmB,UAAhBA,GAA4B,wCAC7B,wBAAQa,QAASX,EAAQY,KAAK,SAA9B,uC,oCC5DD,SAASC,EAAT,GAAgD,IAA/BC,EAA8B,EAA9BA,UAAcC,EAAgB,iBAC5CC,EAAWC,iBAAyB,MAgB1C,OAdAC,qBAAU,WACN,GAAKF,EAASG,QAAd,CAEA,IAAMjB,EAAQc,EAASG,QAEnB,cAAejB,EACfA,EAAMY,UAAYA,EAIlBZ,EAAMkB,IAAMC,IAAIC,gBAAgBR,MAErC,CAACA,IAEG,mCAAOS,IAAKP,GAAcD,I,2CCgChBS,E,WAqBjB,WAAYC,GAAyB,yBApB7BC,oBAoB4B,OAlB5BC,eAkB4B,OAhB5BC,YAgB4B,OAd5BC,cAc4B,OAZ5BC,iBAY4B,OAV5BC,KAAmC,KAUP,KAR5BC,aAAmC,KAQP,KAN5BC,oBAM4B,OAJ5BC,QAI4B,OAF5BC,eAE4B,EAChCC,KAAKV,eAAiBD,EAAEC,eACxBU,KAAKT,UAAYF,EAAEE,UACnBS,KAAKR,OAASH,EAAEG,OAChBQ,KAAKP,SAAWJ,EAAEI,SAClBO,KAAKN,YAAcL,EAAEK,YACrBM,KAAKH,eAAiBR,EAAEQ,eACxBG,KAAKD,UAAYV,EAAEU,UAEnBC,KAAKF,GAAK,IAAIG,UAAUZ,EAAEa,OAC1BF,KAAKG,gB,iDAGT,WAA+B,IAAD,OAG1BH,KAAKF,GAAG5B,iBAAiB,QAAQ,WAC7B,EAAK4B,GAAGM,KAAKC,KAAKC,UAAU,CACxBC,MAAO,cACPC,UAAW,EAAKT,gBAIxBC,KAAKF,GAAG5B,iBAAiB,WAAW,SAAAuC,GAChC,IAAMC,EAAoBL,KAAKM,MAAMF,EAAGC,MAGxC,GAAoB,UAAhBA,EAAKE,OAAT,CAMA,GAAmB,SAAfF,EAAKH,MAAkB,CAEvB,GAAuB,WAAnBG,EAAKA,KAAKlC,KAAmB,CAC7B,GAAiB,MAAb,EAAKmB,KACL,MAAM,IAAIrC,MAAM,gCAKpB,OAFAc,QAAQC,IAAI,YAAa,kBAAmBqC,QAC5C,EAAKf,KAAKkB,OAAOH,EAAKA,KAAKG,QAK/B,MAAuB,SAAnBH,EAAKA,KAAKlC,MAEa,iBAAnBkC,EAAKA,KAAKI,UACV,EAAKC,gBAKb3C,QAAQC,IAAI,YAAa,8BAA+BqC,GAK5D,GAAmB,gBAAfA,EAAKH,MAIL,OAHAnC,QAAQC,IAAI,YAAa,iBAAkBqC,GAGvCA,EAAKM,gBAAkB,GACvB,EAAKD,SAAS,kBAGd,EAAKjB,GAAGM,KAAKC,KAAKC,UAAU,CACxBC,MAAO,UACPG,KAAM,CACFlC,KAAM,OACNsC,KAAM,yBAMlB1C,QAAQC,IAAI,YAAa,oBAI7BD,QAAQC,IAAI,YAAa,oBAAqBqC,QArD1CtC,QAAQE,MAAM,YAAa,iBAAkBoC,MAwDrDV,KAAKF,GAAG5B,iBAAiB,SAAS,SAAAuC,GAC9BrC,QAAQ6C,KAAK,YAAa,sBAAuBR,EAAGS,KAAMT,EAAGU,a,sBAIrE,SAAiBC,GAA4B,IAAD,SAExCpB,KAAKL,KAAO,IAAI0B,IAAW,CACvBC,UAA2B,cAAhBF,EACXG,aAAcvB,KAAKwB,cACnBzD,OAAM,UAAEiC,KAAKJ,oBAAP,aAAuB6B,IAEjCzB,KAAKJ,aAAe,KAEpBI,KAAKL,KAAK+B,GAAG,UAAU,SAAAb,GACnB,EAAKf,GAAGM,KAAKC,KAAKC,UAAU,CACxBC,MAAO,UACPG,KAAM,CACFlC,KAAM,SACNqC,gBAKZb,KAAKL,KAAK+B,GAAG,WAAW,WACK,MAArB,EAAK9B,eACL,EAAKD,KAAMgC,UAAU,EAAK/B,cAC1B,EAAKA,aAAe,SAI5BI,KAAKL,KAAK+B,GAAG,UAAU,SAAAE,GAAC,OAAI,EAAKnC,SAASmC,MAE1C5B,KAAKL,KAAK+B,GAAG,QAAQ,SAAAG,GACjB,IAAMnB,EAAOL,KAAKM,MAAMkB,GACN,iBAAdnB,EAAKlC,KAOTJ,QAAQC,IAAI,SAAU,oBAAqBqC,GANf,MAApB,EAAKhB,aACL,EAAKA,mB,2BASrB,SAAsBoC,GAclB,OAZAA,EAAMA,EAAIC,QAAQ,oBAAqB,IAGZ,MAAvB/B,KAAKV,iBACLwC,EAAMA,EAAIC,QAAQ,mBAAZ,8BAAuD/B,KAAKV,eAA5D,UAIiB,MAAvBU,KAAKH,iBACLiC,EAAMA,EAAIC,QAAQ,mBAAZ,8BAAuD/B,KAAKH,eAA5D,UAGHiC,I,uBAGX,SAAiB/D,GACI,MAAbiC,KAAKL,KAKTK,KAAKL,KAAKgC,UAAU5D,GAJhBiC,KAAKJ,aAAe7B,I,0BAO5B,SAAoBA,GACC,MAAbiC,KAAKL,MAKTK,KAAKL,KAAKS,KAAKC,KAAKC,UAAU,CAC1B9B,KAAM,kBAEVwB,KAAKL,KAAKqC,aAAajE,IAPnBiC,KAAKJ,aAAe,S,YCxO1BqC,EAAUC,yBAAc,SAAAC,GAAC,OAAIC,cAAI,CAAEC,QAAS,CAAC,cAAe,OAAQ,gBAAiBC,OAAOH,MAG5FI,EAAaC,OAAOC,QAAQC,4MAAaC,QAAO,SAACC,EAAD,GAAkB,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAGnE,OADAF,EADAC,EAAIA,EAAEd,QAAQ,eAAgB,KACrBe,EACFF,IACR,IAOYG,EALHC,mBAAST,EAAY,CAC7BU,SAAUhB,EAAQ,CAAEiB,QAAS,gBAC7BC,OAAQC,kBCfG,MAA0B,iCCoC1BC,MA7Bf,WACI,IAAIC,EAEJ,EAA4B7F,mBAA6B,MAAzD,mBAAOM,EAAP,KAAewF,EAAf,KAWA,OARAzE,qBAAU,WACNwE,EAAK,IAAIlE,EAAY,CACjBK,SAAU8D,EACVrD,MAAO6C,EAAII,OACXpD,UAAWyD,OAAOC,SAASC,MAAQ,WAExC,CAAC,SAGF,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAK3E,IAAK4E,EAAMD,UAAU,WAAWE,IAAI,SAEzC,cAACtG,EAAD,CAAcS,iBAAkB,SAAA4D,GAAC,OAAI0B,EAAG3B,UAAUC,IAAIzD,cAAe,SAAAyD,GAAC,OAAI0B,EAAGtB,aAAaJ,MAEzF7D,GACC,cAACU,EAAD,CAAOqF,MAAM,MAAMC,UAAQ,EAACC,OAAK,EAACC,UAAQ,EAACvF,UAAWX,UCfnDmG,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.200d20bd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ninterface Props {\n    onStreamSelected?: (stream: MediaStream) => void;\n    onStreamEnded?: (stream: MediaStream) => void;\n    constraints?: {\n        height?: number;\n        frameRate?: number;\n    };\n}\n\nfunction getDisplayMedia(constraints?: MediaStreamConstraints) {\n    if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) {\n        return navigator.mediaDevices.getDisplayMedia(constraints);\n    }\n    if (navigator.getDisplayMedia) {\n        return navigator.getDisplayMedia(constraints);\n    }\n    throw new Error(\"getDisplayMedia is not available.\");\n}\n\nfunction supportsDisplayMedia() {\n    return (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia) || navigator.getDisplayMedia;\n}\n\ntype StreamState = \"initial\" | \"error\" | \"selected\" | \"ended\";\n\nexport function SelectStream(p: Props) {\n    if (!supportsDisplayMedia()) {\n        return (\n          <div>Not supported</div>\n        );\n    }\n\n    const [streamState, setStreamState] = useState<StreamState>(\"initial\");\n\n    const select = async () => {\n        try {\n            const stream = await getDisplayMedia({ video: p.constraints || true });\n            if (p.onStreamSelected) {\n                p.onStreamSelected(stream);\n            }\n            setStreamState(\"selected\");\n\n            const [video] = stream.getVideoTracks();\n            video.addEventListener(\"ended\", () => {\n                if (p.onStreamEnded) {\n                    p.onStreamEnded(stream);\n                }\n                setStreamState(\"ended\");\n            });\n            console.log(\"video\", video);\n        }\n        catch (err) {\n            console.error(err);\n            setStreamState(\"error\");\n        }\n    };\n\n    if (streamState === \"selected\") {\n        return (\n          <div>Stream selected</div>\n        );\n    }\n\n    return (\n      <>\n        {streamState === \"error\" && (<div>Error</div>)}\n        <button onClick={select} type=\"button\">\n          Select screen to share\n        </button>\n      </>\n    );\n}\n","import React, { VideoHTMLAttributes, useEffect, useRef } from \"react\";\n\ntype Props = VideoHTMLAttributes<HTMLVideoElement> & {\n    srcObject: MediaStream\n}\n\ntype OldVideoElement = Omit<HTMLVideoElement, \"srcObject\">\n\nexport function Video({ srcObject, ...props }: Props) {\n    const refVideo = useRef<HTMLVideoElement>(null);\n\n    useEffect(() => {\n        if (!refVideo.current) return;\n\n        const video = refVideo.current as HTMLVideoElement | OldVideoElement;\n\n        if (\"srcObject\" in video) {\n            video.srcObject = srcObject;\n        }\n        else {\n            // Avoid using this in new browsers, as it is going away.\n            video.src = URL.createObjectURL(srcObject);\n        }\n    }, [srcObject]);\n\n    return <video ref={refVideo} {...props} />;\n}\n","import SimplePeer from \"simple-peer\";\n\ninterface ScreenSharePeerOpts {\n    /** Maximum audio bandwidth, in kbps. Recommended value range is 40 - 200. */\n    audioBandwidth?: number;\n\n    /** Maximum frame rate, in fps. Recommended values are 15, 30, 60. */\n    frameRate?: number;\n\n    /** Maximum frame height, in pixels. Recommended values are 480, 720, 1080, 1440, 2560. */\n    height?: number;\n\n    /** Called when the stream is starting */\n    onStream: (stream: MediaStream) => void;\n\n    /** Called when the stream is ending */\n    onStreamEnd?: () => void;\n\n    /** Maximum audio bandwidth, in kbps. Recommended value range is 1000 - 15000+. */\n    videoBandwidth?: number;\n\n    /** WebSocket URL for signalling. */\n    wsUrl: string;\n\n    /** WebSocket channel for signalling. */\n    wsChannel: string;\n}\n\ninterface Response {\n    message: string;\n    route: string;\n    status: \"success\" | \"error\";\n}\n\ninterface ResponseChannel extends Response {\n    numberOfMembers: number;\n    route: \"joinChannel\" | \"leaveChannel\" | \"getChannel\";\n}\n\ninterface ResponseSignal extends Response {\n    data: {\n        type: \"signal\";\n        signal: SimplePeer.SignalData;\n    }\n    route: \"peer\";\n}\n\ninterface ResponseText extends Response {\n    data: {\n        type: \"text\";\n        text: string;\n    }\n    route: \"peer\";\n}\n\ntype ResponseAny = ResponseChannel | ResponseSignal | ResponseText;\n\nexport default class PeerManager {\n    private audioBandwidth?: number;\n\n    private frameRate?: number;\n\n    private height?: number;\n\n    private onStream: (stream: MediaStream) => void;\n\n    private onStreamEnd?: () => void;\n\n    private peer: null | SimplePeer.Instance = null;\n\n    private queuedStream: null | MediaStream = null;\n\n    private videoBandwidth?: number;\n\n    private ws: WebSocket;\n\n    private wsChannel: string;\n\n    constructor(o: ScreenSharePeerOpts) {\n        this.audioBandwidth = o.audioBandwidth;\n        this.frameRate = o.frameRate;\n        this.height = o.height;\n        this.onStream = o.onStream;\n        this.onStreamEnd = o.onStreamEnd;\n        this.videoBandwidth = o.videoBandwidth;\n        this.wsChannel = o.wsChannel;\n\n        this.ws = new WebSocket(o.wsUrl);\n        this.initWebSocket();\n    }\n\n    private initWebSocket(): void {\n        // WebSocket is created in constructor\n\n        this.ws.addEventListener(\"open\", () => {\n            this.ws.send(JSON.stringify({\n                route: \"joinChannel\",\n                channelId: this.wsChannel,\n            }));\n        });\n\n        this.ws.addEventListener(\"message\", ev => {\n            const data: ResponseAny = JSON.parse(ev.data);\n\n            // error result\n            if (data.status === \"error\") {\n                console.error(\"WebSocket\", \"Received error\", data);\n                return;\n            }\n\n            // got message from peer\n            if (data.route === \"peer\") {\n                // got signal\n                if (data.data.type === \"signal\") {\n                    if (this.peer == null) {\n                        throw new Error(\"Cannot signal, peer is null.\");\n                    }\n\n                    console.log(\"WebSocket\", \"Received signal\", data);\n                    this.peer.signal(data.data.signal);\n                    return;\n                }\n\n                // got text message\n                if (data.data.type === \"text\") {\n                    // peer is initializing, we can start :)\n                    if (data.data.text === \"initializing\") {\n                        this.initPeer();\n                        return;\n                    }\n                }\n\n                console.log(\"WebSocket\", \"Unhandled message from peer\", data);\n                return;\n            }\n\n            // finished joining a channel\n            if (data.route === \"joinChannel\") {\n                console.log(\"WebSocket\", \"Joined channel\", data);\n\n                // we have a peer waiting for us\n                if (data.numberOfMembers > 1) {\n                    this.initPeer(\"initiator\");\n\n                    // tell peer that we're initializing\n                    this.ws.send(JSON.stringify({\n                        route: \"message\",\n                        data: {\n                            type: \"text\",\n                            text: \"initializing\",\n                        },\n                    }));\n                    return;\n                }\n\n                console.log(\"WebSocket\", \"Waiting for peer\");\n                return;\n            }\n\n            console.log(\"WebSocket\", \"Unhandled message\", data);\n        });\n\n        this.ws.addEventListener(\"close\", ev => {\n            console.warn(\"WebSocket\", \"Closed unexpectedly\", ev.code, ev.reason);\n        });\n    }\n\n    private initPeer(isInitiator?: \"initiator\") {\n        // create peer\n        this.peer = new SimplePeer({\n            initiator: isInitiator === \"initiator\",\n            sdpTransform: this.sdpTransform_,\n            stream: this.queuedStream ?? undefined,\n        });\n        this.queuedStream = null;\n\n        this.peer.on(\"signal\", signal => {\n            this.ws.send(JSON.stringify({\n                route: \"message\",\n                data: {\n                    type: \"signal\",\n                    signal,\n                },\n            }));\n        });\n\n        this.peer.on(\"connect\", () => {\n            if (this.queuedStream != null) {\n                this.peer!.addStream(this.queuedStream);\n                this.queuedStream = null;\n            }\n        });\n\n        this.peer.on(\"stream\", s => this.onStream(s));\n\n        this.peer.on(\"data\", raw => {\n            const data = JSON.parse(raw);\n            if (data.type === \"streamEnding\") {\n                if (this.onStreamEnd != null) {\n                    this.onStreamEnd();\n                }\n                return;\n            }\n\n            console.log(\"WebRTC\", \"Unhandled message\", data);\n        });\n    }\n\n    private sdpTransform_(sdp: string) {\n        // remove existing b=AS: tags\n        sdp = sdp.replace(/b=AS([^\\r]+\\r\\n)/g, \"\");\n\n        // add audio bandwidth constraint\n        if (this.audioBandwidth != null) {\n            sdp = sdp.replace(/a=mid:audio\\r\\n/g, `a=mid:audio\\r\\nb=AS:${this.audioBandwidth}\\r\\n`);\n        }\n\n        // add video bandwidth constraint\n        if (this.videoBandwidth != null) {\n            sdp = sdp.replace(/a=mid:video\\r\\n/g, `a=mid:video\\r\\nb=AS:${this.videoBandwidth}\\r\\n`);\n        }\n\n        return sdp;\n    }\n\n    public addStream(stream: MediaStream) {\n        if (this.peer == null) {\n            this.queuedStream = stream;\n            return;\n        }\n\n        this.peer.addStream(stream);\n    }\n\n    public removeStream(stream: MediaStream) {\n        if (this.peer == null) {\n            this.queuedStream = null;\n            return;\n        }\n\n        this.peer.send(JSON.stringify({\n            type: \"streamEnding\",\n        }));\n        this.peer.removeStream(stream);\n    }\n}\n","import { cleanEnv, makeValidator, str, url } from \"envalid\";\n\ntype NodeEnv = \"development\" | \"production\" | \"test\";\n\nconst nodeEnv = makeValidator(x => str({ choices: [\"development\", \"test\", \"production\"] })._parse(x) as NodeEnv);\n\n// remove REACT_APP_ prefix\nconst renamedEnv = Object.entries(process.env).reduce((obj, [k, v]) => {\n    k = k.replace(/^REACT_APP_/i, \"\");\n    obj[k] = v;\n    return obj;\n}, {} as Record<string, any>);\n\nconst env = cleanEnv(renamedEnv, {\n    NODE_ENV: nodeEnv({ default: \"development\" }),\n    WS_URL: url(),\n});\n\nexport default env;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\nimport { SelectStream, Video } from \"components\";\nimport \"./App.css\";\nimport PeerManager from \"PeerManager\";\nimport env from \"env\";\nimport logo from \"./logo.svg\";\n\nfunction App() {\n    let pm: PeerManager;\n\n    const [stream, setStream] = useState<null | MediaStream>(null);\n\n    // set up PeerManager\n    useEffect(() => {\n        pm = new PeerManager({\n            onStream: setStream,\n            wsUrl: env.WS_URL,\n            wsChannel: window.location.hash || \"test\",\n        });\n    }, [\"once\"]);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <SelectStream onStreamSelected={s => pm.addStream(s)} onStreamEnded={s => pm.removeStream(s)} />\n\n          {stream && (\n            <Video width=\"90%\" autoPlay muted controls srcObject={stream} />\n          )}\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}