{"version":3,"sources":["components/SelectStream.tsx","components/Video.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getDisplayMedia","constraints","navigator","mediaDevices","Error","SelectStream","p","useState","streamState","setStreamState","select","a","video","stream","onStreamSelected","getVideoTracks","addEventListener","onStreamEnded","console","log","error","onClick","type","Video","srcObject","props","refVideo","useRef","useEffect","current","src","URL","createObjectURL","ref","App","setStream","className","logo","alt","s","width","autoPlay","muted","controls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAWA,SAASA,EAAgBC,GACrB,GAAIC,UAAUC,aAAaH,gBACvB,OAAOE,UAAUC,aAAaH,gBAAgBC,GAElD,GAAIC,UAAUF,gBACV,OAAOE,UAAUF,gBAAgBC,GAErC,MAAM,IAAIG,MAAM,qCAKb,SAASC,EAAaC,GACzB,IAAKJ,UAAUF,kBAAoBE,UAAUC,aAAaH,gBACtD,OACE,gDAIN,MAAsCO,mBAAsB,WAA5D,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAM,uCAAG,kCAAAC,EAAA,+EAEcX,EAAgB,CAAEY,MAAON,EAAEL,cAAe,IAFxD,OAEDY,EAFC,OAGHP,EAAEQ,kBACFR,EAAEQ,iBAAiBD,GAEvBJ,EAAe,YANR,EAQSI,EAAOE,iBARhB,oBAQAH,EARA,MASDI,iBAAiB,SAAS,WACxBV,EAAEW,eACFX,EAAEW,gBAENR,EAAe,YAEnBS,QAAQC,IAAI,QAASP,GAfd,kDAkBPM,QAAQE,MAAR,MACAX,EAAe,SAnBR,0DAAH,qDAuBZ,MAAoB,aAAhBD,EAEE,kDAKJ,qCACmB,UAAhBA,GAA4B,wCAC7B,wBAAQa,QAASX,EAAQY,KAAK,SAA9B,uC,kCCxDD,SAASC,EAAT,GAAgD,IAA/BC,EAA8B,EAA9BA,UAAcC,EAAgB,iBAC5CC,EAAWC,iBAAyB,MAgB1C,OAdAC,qBAAU,WACN,GAAKF,EAASG,QAAd,CAEA,IAAMjB,EAAQc,EAASG,QAEnB,cAAejB,EACfA,EAAMY,UAAYA,EAIlBZ,EAAMkB,IAAMC,IAAIC,gBAAgBR,MAErC,CAACA,IAEG,mCAAOS,IAAKP,GAAcD,ICzBtB,UAA0B,iC,MCuB1BS,MAlBf,WACI,MAA4B3B,mBAA6B,MAAzD,mBAAOM,EAAP,KAAesB,EAAf,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKN,IAAKO,EAAMD,UAAU,WAAWE,IAAI,SAEzC,cAACjC,EAAD,CAAcS,iBAAkB,SAAAyB,GAAC,OAAIJ,EAAUI,IAAItB,cAAe,kBAAMkB,EAAU,SAEjFtB,GACC,cAACU,EAAD,CAAOiB,MAAM,MAAMC,UAAQ,EAACC,OAAK,EAACC,UAAQ,EAACnB,UAAWX,UCFnD+B,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e2b48e9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\ninterface Props {\n    onStreamSelected?: (stream: MediaStream) => void;\n    onStreamEnded?: () => void;\n    constraints?: {\n        height?: number;\n        frameRate?: number;\n    };\n}\n\nfunction getDisplayMedia(constraints?: MediaStreamConstraints) {\n    if (navigator.mediaDevices.getDisplayMedia) {\n        return navigator.mediaDevices.getDisplayMedia(constraints);\n    }\n    if (navigator.getDisplayMedia) {\n        return navigator.getDisplayMedia(constraints);\n    }\n    throw new Error(\"getDisplayMedia is not available.\");\n}\n\ntype StreamState = \"initial\" | \"error\" | \"selected\" | \"ended\";\n\nexport function SelectStream(p: Props) {\n    if (!navigator.getDisplayMedia && !navigator.mediaDevices.getDisplayMedia) {\n        return (\n          <div>Not supported</div>\n        );\n    }\n\n    const [streamState, setStreamState] = useState<StreamState>(\"initial\");\n\n    const select = async () => {\n        try {\n            const stream = await getDisplayMedia({ video: p.constraints || true });\n            if (p.onStreamSelected) {\n                p.onStreamSelected(stream);\n            }\n            setStreamState(\"selected\");\n\n            const [video] = stream.getVideoTracks();\n            video.addEventListener(\"ended\", () => {\n                if (p.onStreamEnded) {\n                    p.onStreamEnded();\n                }\n                setStreamState(\"ended\");\n            });\n            console.log(\"video\", video);\n        }\n        catch (err) {\n            console.error(err);\n            setStreamState(\"error\");\n        }\n    };\n\n    if (streamState === \"selected\") {\n        return (\n          <div>Stream selected</div>\n        );\n    }\n\n    return (\n      <>\n        {streamState === \"error\" && (<div>Error</div>)}\n        <button onClick={select} type=\"button\">\n          Select screen to share\n        </button>\n      </>\n    );\n}\n","import React, { VideoHTMLAttributes, useEffect, useRef } from \"react\";\n\ntype Props = VideoHTMLAttributes<HTMLVideoElement> & {\n    srcObject: MediaStream\n}\n\ntype OldVideoElement = Omit<HTMLVideoElement, \"srcObject\">\n\nexport function Video({ srcObject, ...props }: Props) {\n    const refVideo = useRef<HTMLVideoElement>(null);\n\n    useEffect(() => {\n        if (!refVideo.current) return;\n\n        const video = refVideo.current as HTMLVideoElement | OldVideoElement;\n\n        if (\"srcObject\" in video) {\n            video.srcObject = srcObject;\n        }\n        else {\n            // Avoid using this in new browsers, as it is going away.\n            video.src = URL.createObjectURL(srcObject);\n        }\n    }, [srcObject]);\n\n    return <video ref={refVideo} {...props} />;\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\nimport { SelectStream, Video } from \"components\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n    const [stream, setStream] = useState<null | MediaStream>(null);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <SelectStream onStreamSelected={s => setStream(s)} onStreamEnded={() => setStream(null)} />\n\n          {stream && (\n            <Video width=\"90%\" autoPlay muted controls srcObject={stream} />\n          )}\n        </header>\n      </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}